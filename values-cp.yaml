# Do not use Kong Ingress Controller
ingressController:
 enabled: false
 resources: {}
  
image:
 repository: kong
 tag: "3.9.0"
  
# Mount the secret created earlier
secretVolumes:
 - kong-cluster-cert
  
env:
 # This is a control_plane node
 role: control_plane
 # These certificates are used for control plane / data plane communication
 cluster_cert: /etc/secrets/kong-cluster-cert/tls.crt
 cluster_cert_key: /etc/secrets/kong-cluster-cert/tls.key
  
 # Database
 # CHANGE THESE VALUES
 database: postgres
 pg_database: kong
 pg_user: kong
 pg_password: demo123
 pg_host: kong-cp-postgresql.kong.svc.cluster.local
 pg_ssl: "on"

# kong manager
#  admin_gui_url: http://localhost:8882
#  admin_gui_api_url: http://localhost:8888
#  admin_gui_url: http://35.189.23.236:8002
#  admin_gui_api_url: http://35.189.23.236:8001
 admin_gui_url: http://manager.cacococo.shop:8002 # must same with ingress and loadbalancer setting to avoid CORS
 admin_gui_api_url: http://manager.cacococo.shop:8001
 # Change the secret and set cookie_secure to true if using a HTTPS endpoint
 admin_gui_session_conf: '{"secret":"secret","storage":"kong","cookie_secure":false}'
  
 # Kong Manager password
 password: caco123


# Enterprise functionality
enterprise:
 enabled: true
 license_secret: kong-enterprise-license
 rbac:
    enabled: true
    admin_gui_auth: basic-auth
  
# The control plane serves the Admin API
admin:
 enabled: true
 http:
   enabled: true
 resources: {}
  
# Clustering endpoints are required in hybrid mode
cluster:
 enabled: true
 tls:
   enabled: true
 resources: {}
  
clustertelemetry:
 enabled: true
 resources: {}
 tls:
   enabled: true
  
# Optional features
# manager:
#  enabled: false

manager:
  enabled: true
  resources: {}
  http:
    # Enable plaintext HTTP listen for Kong Manager
    enabled: true
    servicePort: 8002
    containerPort: 8002
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []
  tls:
    # Enable HTTPS listen for Kong Manager
    enabled: false
    servicePort: 8445
    containerPort: 8445
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32443
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters:
    - http2
  annotations:
    beta.cloud.google.com/backend-config: '{"default":"kong-hc"}'
  ingress:
    enabled: true
    # hostname: manager.example.com
    hostname: manager.cacococo.shop
    ingressClassName: gce
    path: /
    pathType: Prefix
    annotations:
      # kubernetes.io/ingress.class: gce-internal
      kubernetes.io/ingress.class: gce

portal:
  # Enable creating a Kubernetes service for the Developer Portal
  enabled: true
  resources: {}
  type: NodePort
  loadBalancerClass: gce
  # To specify annotations or labels for the Portal service, add them to the respective
  # "annotations" or "labels" dictionaries below.
  annotations: {}
  #  service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
  labels: {}

  http:
    # Enable plaintext HTTP listen for the Developer Portal
    enabled: true
    servicePort: 8003
    containerPort: 8003
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32080
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters: []

  tls:
    # Enable HTTPS listen for the Developer Portal
    enabled: true
    servicePort: 8446
    containerPort: 8446
    # Set a nodePort which is available if service type is NodePort
    # nodePort: 32443
    # Additional listen parameters, e.g. "reuseport", "backlog=16384"
    parameters:
    - http2

  
# These roles will be served by different Helm releases
proxy:
 enabled: false

# This is for testing purposes only
# DO NOT DO THIS IN PRODUCTION
# Your cluster needs a way to create PersistentVolumeClaims
# if this option is enabled
postgresql:
  enabled: true
  resources: {}
  auth:
    password: demo123

controller:
 resources: {}
 ingressController:
   image:
     repository: kong/kubernetes-ingress-controller
     tag: "3.4.1"

gateway:
 env:
   router_flavor: expressions



